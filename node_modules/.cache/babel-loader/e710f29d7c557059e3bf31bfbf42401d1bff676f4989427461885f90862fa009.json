{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2003j\\\\OneDrive\\\\Ambiente de Trabalho\\\\TrabalhoLS\\\\minesweeper\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport GameBoard from \"./GameBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [time, setTime] = useState(0);\n  const [score, setScore] = useState(0);\n  const [scoreRanking, setScoreRanking] = useState([]);\n  const [playerName, setPlayerName] = useState(\"\");\n\n  // Controle do jogo\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gamePaused, setGamePaused] = useState(false);\n  const [difficulty, setDifficulty] = useState(\"easy\");\n  const [intervalId, setIntervalId] = useState(null);\n\n  // tempo\n  useEffect(() => {\n    // tempo quando o jogo começa \n    if (gameStarted && !gamePaused) {\n      const id = setInterval(() => setTime(prevTime => prevTime + 1), 1000);\n      setIntervalId(id);\n      return () => clearInterval(id);\n    } else if (!gameStarted) {\n      setTime(0);\n    }\n\n    // clean quando o jogo termina \n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n        setIntervalId(null);\n      }\n    };\n  }, [gameStarted, gamePaused]);\n\n  // tabuleiro dificuldade\n  const generateBoard = difficulty => {\n    let rows, cols, mines;\n\n    // board size \n    switch (difficulty) {\n      case \"easy\":\n        rows = 9;\n        cols = 9;\n        mines = 10;\n        break;\n      case \"medium\":\n        rows = 16;\n        cols = 16;\n        mines = 40;\n        break;\n      case \"hard\":\n        rows = 16;\n        cols = 30;\n        mines = 99;\n        break;\n      default:\n        rows = 9;\n        cols = 9;\n        mines = 10;\n    }\n\n    // tabuleiro com os quadrados (padrao)\n    const newBoard = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => ({\n      value: 0,\n      clicked: false,\n      flagged: false,\n      questioned: false\n    })));\n\n    // minas aleatorias \n    let minesPlaced = 0;\n    while (minesPlaced < mines) {\n      const randomRow = Math.floor(Math.random() * rows);\n      const randomCol = Math.floor(Math.random() * cols);\n      if (!newBoard[randomRow][randomCol].value) {\n        newBoard[randomRow][randomCol].value = \"mine\";\n        minesPlaced++;\n      }\n    }\n\n    // valores adjacentes \n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (newBoard[i][j].value === \"mine\") {\n          for (let dx = -1; dx <= 1; dx++) {\n            for (let dy = -1; dy <= 1; dy++) {\n              const newRow = i + dx;\n              const newCol = j + dy;\n              if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && newBoard[newRow][newCol].value !== \"mine\") {\n                newBoard[newRow][newCol].value++;\n              }\n            }\n          }\n        }\n      }\n    }\n    return newBoard;\n  };\n\n  // expande os quadrados adjacentes \n  const expandCells = (row, col, currentBoard) => {\n    const rows = currentBoard.length;\n    const cols = currentBoard[0].length;\n    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]];\n    const queue = [{\n      row,\n      col\n    }];\n\n    // utiliza uma queue para expandir os quadrados \n    while (queue.length > 0) {\n      const {\n        row,\n        col\n      } = queue.shift();\n      for (const [dx, dy] of directions) {\n        const newRow = row + dx;\n        const newCol = col + dy;\n        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {\n          const cell = currentBoard[newRow][newCol];\n          if (!cell.clicked && cell.value === 0) {\n            currentBoard[newRow][newCol].clicked = true;\n            queue.push({\n              row: newRow,\n              col: newCol\n            });\n          } else if (!cell.clicked && cell.value !== \"mine\") {\n            currentBoard[newRow][newCol].clicked = true;\n          }\n        }\n      }\n    }\n    return currentBoard;\n  };\n\n  // reset\n  const resetGame = () => {\n    setBoard([]);\n    setTime(0);\n    setScore(0);\n    setGameStarted(false);\n    setGamePaused(false);\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n  };\n\n  // pontuacao ao rank \n  const addToScoreRanking = (name, score, time) => {\n    const newScore = {\n      name,\n      score,\n      time\n    };\n    const updatedRanking = [...scoreRanking, newScore];\n    updatedRanking.sort((a, b) => b.score - a.score || a.time - b.time);\n    const top10 = updatedRanking.slice(0, 10);\n    setScoreRanking(top10);\n  };\n\n  // Inicia o jogo\n  const handleStartClick = name => {\n    resetGame();\n    setGameStarted(true);\n    setGamePaused(false);\n    setScore(0);\n    setPlayerName(name);\n    setBoard(generateBoard(difficulty));\n  };\n\n  // Termina o jogo\n  const handleEndClick = (message, isWin = false) => {\n    setGameStarted(false);\n    setGamePaused(false);\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n    addToScoreRanking(playerName, score, time);\n    alert(message);\n    resetGame();\n  };\n\n  // Muda a dificuldade do jogo\n  const handleDifficultyChange = selectedDifficulty => {\n    setDifficulty(selectedDifficulty);\n    if (gameStarted) {\n      handleEndClick(\"Terminado.\");\n      handleStartClick(playerName);\n    }\n  };\n\n  // Função de clique em um quadrado \n  const handleCellClick = (row, col) => {\n    if (gamePaused || !gameStarted) {\n      return;\n    }\n    if (board[row][col].clicked || board[row][col].flagged || board[row][col].questioned) {\n      return;\n    }\n    let newBoard = board.map(row => row.map(cell => ({\n      ...cell\n    })));\n    if (newBoard[row][col].value === \"mine\") {\n      console.log(\"Game Over! - CABUMMM\");\n      newBoard = newBoard.map(row => row.map(cell => ({\n        ...cell,\n        clicked: true\n      })));\n      if (intervalId) {\n        clearInterval(intervalId);\n        setIntervalId(null);\n      }\n      handleEndClick(\"CABUMM - GameOver!!!\");\n      setBoard(newBoard);\n    } else {\n      newBoard[row][col].clicked = true;\n      setScore(score + 1);\n      if (newBoard[row][col].value === 0) {\n        newBoard = expandCells(row, col, newBoard);\n      }\n      let allSafeCellsRevealed = true;\n      for (let i = 0; i < newBoard.length; i++) {\n        for (let j = 0; j < newBoard[i].length; j++) {\n          if (newBoard[i][j].value !== \"mine\" && !newBoard[i][j].clicked) {\n            allSafeCellsRevealed = false;\n            break;\n          }\n        }\n        if (!allSafeCellsRevealed) {\n          break;\n        }\n      }\n      if (allSafeCellsRevealed) {\n        console.log(\"GG EZ - Concluiste o jogo\");\n        handleEndClick(\"GG EZ\", true);\n      }\n      setBoard(newBoard);\n    }\n  };\n\n  // click direito \n  const handleCellRightClick = (e, row, col) => {\n    e.preventDefault();\n    if (gamePaused || !gameStarted) {\n      return;\n    }\n    const newBoard = board.map(row => row.map(cell => ({\n      ...cell\n    })));\n    if (!newBoard[row][col].clicked) {\n      if (newBoard[row][col].flagged) {\n        newBoard[row][col].flagged = false;\n        newBoard[row][col].questioned = true;\n      } else if (newBoard[row][col].questioned) {\n        newBoard[row][col].questioned = false;\n      } else {\n        newBoard[row][col].flagged = true;\n      }\n      setBoard(newBoard);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      time: time,\n      score: score,\n      onStartClick: handleStartClick,\n      onEndClick: handleEndClick,\n      onDifficultyChange: handleDifficultyChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      handleCellClick: handleCellClick,\n      handleCellContextMenu: handleCellRightClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-ranking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ranking de Pontua\\xE7\\xF5es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: scoreRanking.map((score, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: score.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 29\n          }, this), \" - \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [score.score, \" pontos\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 57\n          }, this), \" -\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [score.time, \" segundos\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"U+k7qdVAlJobWTGP0xRbDfESonU=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Header","GameBoard","jsxDEV","_jsxDEV","Board","_s","board","setBoard","time","setTime","score","setScore","scoreRanking","setScoreRanking","playerName","setPlayerName","gameStarted","setGameStarted","gamePaused","setGamePaused","difficulty","setDifficulty","intervalId","setIntervalId","id","setInterval","prevTime","clearInterval","generateBoard","rows","cols","mines","newBoard","Array","from","length","value","clicked","flagged","questioned","minesPlaced","randomRow","Math","floor","random","randomCol","i","j","dx","dy","newRow","newCol","expandCells","row","col","currentBoard","directions","queue","shift","cell","push","resetGame","addToScoreRanking","name","newScore","updatedRanking","sort","a","b","top10","slice","handleStartClick","handleEndClick","message","isWin","alert","handleDifficultyChange","selectedDifficulty","handleCellClick","map","console","log","allSafeCellsRevealed","handleCellRightClick","e","preventDefault","className","children","onStartClick","onEndClick","onDifficultyChange","fileName","_jsxFileName","lineNumber","columnNumber","handleCellContextMenu","index","_c","$RefreshReg$"],"sources":["C:/Users/2003j/OneDrive/Ambiente de Trabalho/TrabalhoLS/minesweeper/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./Header\";\r\nimport GameBoard from \"./GameBoard\";\r\n\r\nconst Board = () => {\r\n    const [board, setBoard] = useState([]);\r\n    const [time, setTime] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [scoreRanking, setScoreRanking] = useState([]);\r\n    const [playerName, setPlayerName] = useState(\"\");\r\n\r\n    // Controle do jogo\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [gamePaused, setGamePaused] = useState(false);\r\n    const [difficulty, setDifficulty] = useState(\"easy\");\r\n    const [intervalId, setIntervalId] = useState(null);\r\n\r\n    // tempo\r\n    useEffect(() => {\r\n        // tempo quando o jogo começa \r\n        if (gameStarted && !gamePaused) {\r\n            const id = setInterval(() => setTime((prevTime) => prevTime + 1), 1000);\r\n            setIntervalId(id);\r\n            return () => clearInterval(id);\r\n        } else if (!gameStarted) {\r\n            setTime(0);\r\n        }\r\n\r\n        // clean quando o jogo termina \r\n        return () => {\r\n            if (intervalId) {\r\n                clearInterval(intervalId);\r\n                setIntervalId(null);\r\n            }\r\n        };\r\n    }, [gameStarted, gamePaused]);\r\n\r\n    // tabuleiro dificuldade\r\n    const generateBoard = (difficulty) => {\r\n        let rows, cols, mines;\r\n\r\n        // board size \r\n        switch (difficulty) {\r\n            case \"easy\":\r\n                rows = 9;\r\n                cols = 9;\r\n                mines = 10;\r\n                break;\r\n            case \"medium\":\r\n                rows = 16;\r\n                cols = 16;\r\n                mines = 40;\r\n                break;\r\n            case \"hard\":\r\n                rows = 16;\r\n                cols = 30;\r\n                mines = 99;\r\n                break;\r\n            default:\r\n                rows = 9;\r\n                cols = 9;\r\n                mines = 10;\r\n        }\r\n\r\n        // tabuleiro com os quadrados (padrao)\r\n        const newBoard = Array.from({ length: rows }, () =>\r\n            Array.from({ length: cols }, () => ({\r\n                value: 0,\r\n                clicked: false,\r\n                flagged: false,\r\n                questioned: false,\r\n            }))\r\n        );\r\n\r\n        // minas aleatorias \r\n        let minesPlaced = 0;\r\n        while (minesPlaced < mines) {\r\n            const randomRow = Math.floor(Math.random() * rows);\r\n            const randomCol = Math.floor(Math.random() * cols);\r\n            if (!newBoard[randomRow][randomCol].value) {\r\n                newBoard[randomRow][randomCol].value = \"mine\";\r\n                minesPlaced++;\r\n            }\r\n        }\r\n\r\n        // valores adjacentes \r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (newBoard[i][j].value === \"mine\") {\r\n                    for (let dx = -1; dx <= 1; dx++) {\r\n                        for (let dy = -1; dy <= 1; dy++) {\r\n                            const newRow = i + dx;\r\n                            const newCol = j + dy;\r\n                            if (\r\n                                newRow >= 0 &&\r\n                                newRow < rows &&\r\n                                newCol >= 0 &&\r\n                                newCol < cols &&\r\n                                newBoard[newRow][newCol].value !== \"mine\"\r\n                            ) {\r\n                                newBoard[newRow][newCol].value++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return newBoard;\r\n    };\r\n\r\n    // expande os quadrados adjacentes \r\n    const expandCells = (row, col, currentBoard) => {\r\n        const rows = currentBoard.length;\r\n        const cols = currentBoard[0].length;\r\n\r\n        const directions = [\r\n            [-1, 0],\r\n            [1, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n            [-1, -1],\r\n            [-1, 1],\r\n            [1, -1],\r\n            [1, 1],\r\n        ];\r\n\r\n        const queue = [{ row, col }];\r\n\r\n        // utiliza uma queue para expandir os quadrados \r\n        while (queue.length > 0) {\r\n            const { row, col } = queue.shift();\r\n\r\n            for (const [dx, dy] of directions) {\r\n                const newRow = row + dx;\r\n                const newCol = col + dy;\r\n\r\n                if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {\r\n                    const cell = currentBoard[newRow][newCol];\r\n\r\n                    if (!cell.clicked && cell.value === 0) {\r\n                        currentBoard[newRow][newCol].clicked = true;\r\n                        queue.push({ row: newRow, col: newCol });\r\n                    } else if (!cell.clicked && cell.value !== \"mine\") {\r\n                        currentBoard[newRow][newCol].clicked = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentBoard;\r\n    };\r\n\r\n    // reset\r\n    const resetGame = () => {\r\n        setBoard([]);\r\n        setTime(0);\r\n        setScore(0);\r\n        setGameStarted(false);\r\n        setGamePaused(false);\r\n        if (intervalId) {\r\n            clearInterval(intervalId);\r\n            setIntervalId(null);\r\n        }\r\n    };\r\n\r\n    // pontuacao ao rank \r\n    const addToScoreRanking = (name, score, time) => {\r\n        const newScore = { name, score, time };\r\n        const updatedRanking = [...scoreRanking, newScore];\r\n        updatedRanking.sort((a, b) => b.score - a.score || a.time - b.time);\r\n        const top10 = updatedRanking.slice(0, 10);\r\n        setScoreRanking(top10);\r\n    };\r\n\r\n    // Inicia o jogo\r\n    const handleStartClick = (name) => {\r\n        resetGame();\r\n        setGameStarted(true);\r\n        setGamePaused(false);\r\n        setScore(0);\r\n        setPlayerName(name);\r\n        setBoard(generateBoard(difficulty));\r\n    };\r\n\r\n    // Termina o jogo\r\n    const handleEndClick = (message, isWin = false) => {\r\n        setGameStarted(false);\r\n        setGamePaused(false);\r\n        if (intervalId) {\r\n            clearInterval(intervalId);\r\n            setIntervalId(null);\r\n        }\r\n\r\n        addToScoreRanking(playerName, score, time);\r\n\r\n        alert(message);\r\n        resetGame();\r\n    };\r\n\r\n    // Muda a dificuldade do jogo\r\n    const handleDifficultyChange = (selectedDifficulty) => {\r\n        setDifficulty(selectedDifficulty);\r\n        if (gameStarted) {\r\n            handleEndClick(\"Terminado.\");\r\n            handleStartClick(playerName);\r\n        }\r\n    };\r\n\r\n    // Função de clique em um quadrado \r\n    const handleCellClick = (row, col) => {\r\n        if (gamePaused || !gameStarted) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            board[row][col].clicked ||\r\n            board[row][col].flagged ||\r\n            board[row][col].questioned\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        let newBoard = board.map((row) => row.map((cell) => ({ ...cell })));\r\n\r\n        if (newBoard[row][col].value === \"mine\") {\r\n            console.log(\"Game Over! - CABUMMM\");\r\n\r\n            newBoard = newBoard.map((row) =>\r\n                row.map((cell) => ({\r\n                    ...cell,\r\n                    clicked: true,\r\n                }))\r\n            );\r\n\r\n            if (intervalId) {\r\n                clearInterval(intervalId);\r\n                setIntervalId(null);\r\n            }\r\n\r\n            handleEndClick(\"CABUMM - GameOver!!!\");\r\n            setBoard(newBoard);\r\n        } else {\r\n            newBoard[row][col].clicked = true;\r\n            setScore(score + 1);\r\n\r\n            if (newBoard[row][col].value === 0) {\r\n                newBoard = expandCells(row, col, newBoard);\r\n            }\r\n\r\n            let allSafeCellsRevealed = true;\r\n            for (let i = 0; i < newBoard.length; i++) {\r\n                for (let j = 0; j < newBoard[i].length; j++) {\r\n                    if (newBoard[i][j].value !== \"mine\" && !newBoard[i][j].clicked) {\r\n                        allSafeCellsRevealed = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!allSafeCellsRevealed) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (allSafeCellsRevealed) {\r\n                console.log(\"GG EZ - Concluiste o jogo\");\r\n                handleEndClick(\"GG EZ\", true);\r\n            }\r\n\r\n            setBoard(newBoard);\r\n        }\r\n    };\r\n\r\n    // click direito \r\n    const handleCellRightClick = (e, row, col) => {\r\n        e.preventDefault();\r\n        if (gamePaused || !gameStarted) {\r\n            return;\r\n        }\r\n\r\n        const newBoard = board.map((row) => row.map((cell) => ({ ...cell })));\r\n\r\n        if (!newBoard[row][col].clicked) {\r\n            if (newBoard[row][col].flagged) {\r\n                newBoard[row][col].flagged = false;\r\n                newBoard[row][col].questioned = true;\r\n            } else if (newBoard[row][col].questioned) {\r\n                newBoard[row][col].questioned = false;\r\n            } else {\r\n                newBoard[row][col].flagged = true;\r\n            }\r\n            setBoard(newBoard);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            <Header\r\n                time={time}\r\n                score={score}\r\n                onStartClick={handleStartClick}\r\n                onEndClick={handleEndClick}\r\n                onDifficultyChange={handleDifficultyChange}\r\n            />\r\n            <GameBoard\r\n                board={board}\r\n                handleCellClick={handleCellClick}\r\n                handleCellContextMenu={handleCellRightClick}\r\n            />\r\n            <div className=\"score-ranking\">\r\n                <h2>Ranking de Pontuações</h2>\r\n                <ol>\r\n                    {scoreRanking.map((score, index) => (\r\n                        <li key={index}>\r\n                            <span>{score.name}</span> - <span>{score.score} pontos</span> -{\" \"}\r\n                            <span>{score.time} segundos</span>\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}